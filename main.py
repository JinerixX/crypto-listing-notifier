import asyncio
import logging
from dotenv import load_dotenv
from exchanges import binance, bybit, okx, bitget
from notifier import send_telegram_message
from db import init_db, is_new_listing

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ —Ñ–∞–π–ª
logging.basicConfig(
    filename="bot.log",
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    encoding='utf-8'  # –∫–æ–¥–∏—Ä–æ–≤–≤–∫–∞
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–π –±–∏—Ä–∂–∏
async def check_exchange(exchange_func, exchange_name):
    try:
        logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏—Ä–∂–∏: {exchange_name}")
        new_symbols = await exchange_func()
        for symbol in new_symbols:
            if is_new_listing(exchange_name, symbol):
                message = f"üÜï –ù–æ–≤—ã–π –ª–∏—Å—Ç–∏–Ω–≥ –Ω–∞ {exchange_name}: {symbol}"
                logging.info(f"üì¢ {message}")
                await send_telegram_message(message)
            else:
                logging.debug(f"‚è≠ –£–∂–µ –≤ –±–∞–∑–µ: {exchange_name} ‚Äî {symbol}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {exchange_name}: {e}")

# –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
async def main():
    while True:
        await asyncio.gather(
            check_exchange(binance.get_new_symbols, "Binance"),
            check_exchange(bybit.get_new_symbols, "Bybit"),
            check_exchange(okx.get_new_symbols, "OKX"),
            check_exchange(bitget.get_new_symbols, "Bitget"),
        )
        await asyncio.sleep(60)  # –û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏

if __name__ == "__main__":
    asyncio.run(main())
